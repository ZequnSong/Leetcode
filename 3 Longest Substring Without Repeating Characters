/*------------------------------------------------------------------------------------
 *Given a string, find the length of the longest substring without repeating characters.
 *
 *Example 1:
 *Input: "abcabcbb"
 *Output: 3 
 *Explanation: The answer is "abc", with the length of 3. 
 *
 *Example 2:
 *Input: "bbbbb"
 *Output: 1
 *Explanation: The answer is "b", with the length of 1.
 *
 *Example 3:
 *Input: "pwwkew"
 *Output: 3
 *Explanation: The answer is "wke", with the length of 3. 
 *Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
 *--------------------------------------------------------------------------------------
 */
 class Solution {
 //------------------HashMap-----------------------------
    public int lengthOfLongestSubstring(String s) {
        if(s == null || s.length() == 0) return 0;
        HashMap<Character, Integer> map = new HashMap<>();
        int res = 0;
        for(int i = 0, j = 0; i < s.length(); i++){
            if(map.containsKey(s.charAt(i))){
                j = Math.max(j, map.get(s.charAt(i)) + 1); 
                //j代表不重复子序列的起始位置
                //即 i一直顺着向前走，j是保持在不重复序列的起点
                //例如 abca, when i=0, j=0. 
                //when i = 3, containsKey(a)=true,  
                //j = (0, 0+1)=1. 此时还未向map中进行添加，所以此时map中a的value仍然对应0
            } 
            map.put(s.charAt(i), i);
            res = Math.max(res, i - j + 1);
        }
        return res;
    }
//-------------------HashSet-----------------------------
   public int lengthOfLongestSubstring(String s) {
        if(s == null || s.length() == 0) return 0;
        HashSet<Character> set= new HashSet<>();
        int res = 0;
        for(int i = 0, j = 0; i < s.length(); i++){
            if(set.contains(s.charAt(i))){
                set.remove(s.charAt(j++));              
            } else{
                set.add(s.charAt(i));
                res = Math.max(res, set.size());
            } 
        }
        return res;
    }
} 
