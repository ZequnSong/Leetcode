/*
Given an array nums of n integers,
are there elements a, b, c in nums such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.

Example:
Given array nums = [-1, 0, 1, 2, -1, -4],
A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
对比不同：
TwoSum:是否有解？返回一组即可（数组下标），每个值只能用一次。 解法：HashMap
ThreeSum:是否有解？返回所有解（值而不是下标），每个解不能一样。解法：排序，双指针遍历
*/
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        //fix数的范围从0至倒数第三，保证后面至少有两个数，加上fix数能凑成三个数
        for (int i = 0; i < nums.length -2; i++){
            //从第二个数开始，如果和前面的数相等，就跳过，因为我们不想把相同的数fix两次
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            //双指针low，high，新sum值，将问题转化为twosum
            int low = i + 1, high = nums.length - 1, sum = 0 - nums[i];
            while(low < high){
                if(nums[low] + nums[high] == sum){
                    //所求结果
                    res.add(Arrays.asList(nums[i], nums[low], nums[high]));
                    //两个指针都需要去除重复
                    while(low < high && nums[low] == nums[low + 1]) low++;
                    while(low < high && nums[high] == nums[high - 1]) high--;
                    low++;
                    high--;
                }else if(nums[low] + nums[high] < sum){
                    low++;
                }else high--;
            }
        }
        return res;
    }
}
