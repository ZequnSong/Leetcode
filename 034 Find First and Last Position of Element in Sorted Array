/*
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
-----------------------------------------------------------------------------------------------------------------
思路是首先对原数组使用二分查找法，找出其中一个目标值的位置，然后向两边搜索找出起始和结束的位置
*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int idx = search(nums, 0, nums.length - 1, target);
        if( idx == -1 )   return new int[]{-1, -1};            
        int left = idx, right = idx;
        //向两边搜索起始和结束位置
        while( left > 0 && nums[left - 1] == target) left--;
        while( right < nums.length - 1 && nums[right + 1] == target) right++;
        return new int[]{left, right};
    }
    //二分法查找
    public int search(int[] nums, int left, int right, int target){
        if(left > right) return -1;
        int mid = left + (right - left) / 2;
        if(nums[mid] < target) return search(nums, mid + 1, right, target);
        else if(nums[mid] > target) return search(nums, left, mid - 1, target);
        else return mid;
    }
}

//------------------完全O(log n)算法 分别二分找到起始和终点-------------------------------------
class Solution {
    public int[] searchRange(int[] nums, int target) {
         if( nums == null || nums.length == 0) return new int[]{-1, -1};
        int[] res = new int[]{-1,-1};
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) left = mid + 1;
            else right = mid;
        }
        if (nums[left] != target) return res;
        res[0] = left;
        right = nums.length - 1;
        while (left < right) {
            int mid = left + (right + 1 - left) / 2;
            if (nums[mid] <= target) left = mid;
            else right = mid - 1;
        }
        res[1] = left;
        return res;
    }
}
