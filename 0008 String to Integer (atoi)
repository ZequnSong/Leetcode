class Solution {
    public int myAtoi(String str) {
        if( str == null || str.length() == 0) return 0;
        str = str.trim();   //remove the blank space
        if( str == null || str.length() == 0) return 0;
        char firstChar = str.charAt(0);
        int sign = 1;   //positive ? negativen 
        int start = 0;  //start of Traversal
        long res = 0;
        if(firstChar == '+'){
            sign = 1;
            start++;
        }else if(firstChar == '-'){
            sign = -1;
            start++;
        }
        for(int i = start; i < str.length(); i++){
           if(!Character.isDigit(str.charAt(i))){
                return (int) res*sign;
            }
            res = res *10 + str.charAt(i) - '0';
            if (sign == 1 && res > Integer.MAX_VALUE) return Integer.MAX_VALUE;
            if (sign == -1 && res >Integer.MAX_VALUE) return Integer.MIN_VALUE;
            }           
        return (int) res * sign;
        }    
}

/*-------------------------------C++----------------------------------------*/

static int x = [](){ios::sync_with_stdio(false); cin.tie(nullptr); return 0; }();

class Solution {
public:
    int myAtoi(string str) {
        int i, ans, sign, backup;
        i=0;
        while(i<str.length() && str.at(i) == ' ')
            i++;
        sign = 1; // positive
        if(i<str.length() && str.at(i) == '+')
        {
            i++;
        }
        else if(i<str.length() && str.at(i) == '-')
        {
            sign = -1; // negative
            i++;
        }
        ans=0;
        while(i<str.length() && isdigit(str.at(i)))
        {
            backup = ans;
            ans = ans*10+(str.at(i)-'0');
            if(ans<0 || backup != (ans-(str.at(i)-'0'))/10)
                return sign==1?INT_MAX:INT_MIN;
            i++;
        }
        return ans*sign;
    }
};
