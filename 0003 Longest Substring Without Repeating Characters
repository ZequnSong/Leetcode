/*------------------------------------------------------------------------------------
 *Given a string, find the length of the longest substring without repeating characters.
 *
 *Example 1:
 *Input: "abcabcbb"
 *Output: 3 
 *Explanation: The answer is "abc", with the length of 3. 
 *
 *Example 2:
 *Input: "bbbbb"
 *Output: 1
 *Explanation: The answer is "b", with the length of 1.
 *
 *Example 3:
 *Input: "pwwkew"
 *Output: 3
 *Explanation: The answer is "wke", with the length of 3. 
 *Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
 *--------------------------------------------------------------------------------------
 O(n) 遍历一次解决
 思路： 滑动窗口
 
 窗口内的都是没有重复的字符，尽可能的扩大窗口的大小
 用HashMap记录不同字符最后出现的位置
 为了求出窗口的大小，我们需要建立左右边界: length = right - left + 1
 右边界就是当前遍历到的字符的位置,左边界是当前不重复子序列的起点
 
 如果当前遍历到的字符从未出现过，右边界右移
 如果之前出现过，那么就分两种情况：
 1.如果不在滑动窗口内，那么就没事，右边界继续右移
 2.如果在的话，就需要先在滑动窗口内去掉这个已经出现过的字符
 
 去掉的方法并不需要将左边界left一位一位向右遍历查找
 由于HashMap已经保存了该重复字符最后出现的位置
 所以直接移动left指针到该重复字符的next位置
 每次用出现过的窗口大小来更新结果res = Max(res, i - j + 1)
 */
 class Solution {
 //------------------HashMap-----------------------------
    public int lengthOfLongestSubstring(String s) {
        //存储窗口内每个字符的位置（key:char->value:index）
        HashMap<Character, Integer> map = new HashMap<>();
        int res = 0;
        int i,j=0;
        for(i = 0; i < s.length(); i++){
            if(map.containsKey(s.charAt(i))){
                if(map.get(s.charAt(i))>=j)
                    j = map.get(s.charAt(i))+1;
            }          
            map.put(s.charAt(i), i);
            res = Math.max(res, i - j + 1);
        }
        return res;
    }

} 
