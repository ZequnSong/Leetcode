/*------------------------------------------------------------------------------------
 *Given a string, find the length of the longest substring without repeating characters.
 *
 *Example 1:
 *Input: "abcabcbb"
 *Output: 3 
 *Explanation: The answer is "abc", with the length of 3. 
 *
 *Example 2:
 *Input: "bbbbb"
 *Output: 1
 *Explanation: The answer is "b", with the length of 1.
 *
 *Example 3:
 *Input: "pwwkew"
 *Output: 3
 *Explanation: The answer is "wke", with the length of 3. 
 *Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
 *--------------------------------------------------------------------------------------
 滑动窗口
 窗口内的都是没有重复的字符，我们需要尽可能的扩大窗口的大小
 窗口在不停向右滑动，记录字符最后出现的位置，并建立映射
 窗口的右边界就是当前遍历到的字符的位置
 为了求出窗口的大小，我们需要一个变量left来指向滑动窗口的左边界
 如果当前遍历到的字符从未出现过，直接扩大右边界
 如果之前出现过，那么就分两种情况，在或不在滑动窗口内
 如果不在滑动窗口内，那么就没事，当前字符可以加进来
 如果在的话，就需要先在滑动窗口内去掉这个已经出现过的字符了，
 去掉的方法并不需要将左边界left一位一位向右遍历查找
 由于我们的HashMap已经保存了该重复字符最后出现的位置
 所以直接移动left指针就可以了。
 每次用出现过的窗口大小来更新结果res
 */
 class Solution {
 //------------------HashMap-----------------------------
    public int lengthOfLongestSubstring(String s) {
        if(s == null || s.length() == 0) return 0;
        //存储窗口内每个字符的位置（key:char->value:index）
        HashMap<Character, Integer> map = new HashMap<>();
        int res = 0;
        for(int i = 0, j = 0; i < s.length(); i++){
            if(map.containsKey(s.charAt(i))){
                j = Math.max(j, map.get(s.charAt(i)) + 1); 
                //j代表不重复子序列的起始位置
                //即 i一直顺着向前走，j是保持在不重复序列的起点
                //例如 abcae, when i=0, j=0. 
                //when i = 3, containsKey(a)=true,  
                //j = (0, 0+1)=1. 此时还未向map中进行添加，所以此时map中a的value仍然对应0
            } 
            map.put(s.charAt(i), i);
            res = Math.max(res, i - j + 1);
        }
        return res;
    }
//-------------------HashSet-----------------------------
   public int lengthOfLongestSubstring(String s) {
        int res = 0, left =0, right =0;
        if(s == null || s.length() == 0) return res;
        Set<Character> set = new HashSet<>();
        while(right<s.length()) {
            if(!set.contains(s.charAt(right))) {
                set.add(s.charAt(right++));
                res = Math.max(res, set.size());
            }else {
                set.remove(s.charAt(left++));
                //set左边一直remove到不包括最右的元素为止
            }
        }
        return res;
    }
} 
